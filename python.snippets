# XO

#Fields Snippers

snippet fboolean3 "Django Fields Boolean"
${1:field_name} = models.BooleanField(default=${2:True})
endsnippet

snippet dj:fieldChar "Django Fields Char"
${1:field_name} = models.CharField(max_length=${2:value})
endsnippet

snippet dj:fieldChoice "Django Fields Choice Simple"
${1:CHOICE_NAME} = (
    ('${2:key}', '${3:value}'),
)
${4:field_name} = models.CharField(
	max_length=${5:value}, choices=${1//$0/}, default='${2//$0/}'
)
$0
endsnippet

snippet dj:fieldChoiceClass "Django Fields Choice Class"
# pip install enum34
from enum import Enum

class ${1:Choice}Enum(Enum):
    name = (
        'fn', 'Full Name',
    )
    #...
    @classmethod
    def get_value(cls, member):
        return cls[member].value[0]

${2:field_name} = models.CharField(
    max_length=${2:value}, 
    choices=[x.value for x in ${1//$0/}Enum]
)
endsnippet

snippet dj:optionChoice "Django Fields Choice Options"
'${1:key}', '${2:value}',
endsnippet

snippet dj:fieldDateTime "Django Fields DateTime"
${1:field_name} = models.DateTimeField()
endsnippet

snippet dj:fieldDecimal "Django Fields Decimal"
${1:field_name} = models.DecimalField(
	max_digits=${2:value}, decimal_places=${3:value}
)
endsnippet

snippet dj:fieldFloat "Django Fields Float"
${1:field_name} = models.FloatField(default=${2:value})
endsnippet

snippet dj:fieldForeignKey "Django Fields ForeingKey"
${1:field_name} = models.ForeignKey(
	${2:Table}, on_delete=models.CASCADE, 
    related_name='${3:field_related}'
)
endsnippet

snippet dj:fieldImage "Django Fields Image"
${1:field_name} = models.ImageField(upload_to='${2:path}/')
endsnippet

snippet dj:fieldManager "Django Fields Manager"
${1:field_name} = ${1:models.}Manager()
endsnippet

snippet dj:fieldManyToMany "Django Fields ManyToMany"
${1:field_name} = models.ManyToManyField(
	${2:Table}, 
    related_name='${3:field_related}'
)
endsnippet

snippet dj:fieldOneToOne "Django Fields OneToOne"
${1:field_name} = models.OneToOneField(
	${2:Table}, on_delete=models.CASCADE
)
endsnippet

snippet dj:fieldSlug "Django Fields Slug"
${1:field_name} = models.SlugField(
	max_length=${2:value},
    unique_for_date='${3:Field}'
)
endsnippet

snippet dj:fieldText "Django Fields Text"
${1:field_name} = models.TextField()
endsnippet

snippet dj:fieldUuid "Django Fields UUID"
from uuid import uuid4
${1:field_name} = models.UUIDField(
    primary_key=True, default=uuid4, editable=False
)
endsnippet


#Model Snippers

snippet dj:model "Django Model"
class ${1:Model}(models.Model):
    # fields
	${2:name} = models.CharField(max_length=255)

    class Meta:
		# ordering = ['${2//$0/}',]
		verbose_name = '${1//$0/}'
		verbose_name_plural = '${1//$0/}s'

	def __str__(self):
        return f'{self.${2//$0/}}'

endsnippet

snippet dj:modelFunction "Django Model Function"
def ${1:name_function}(self):
	${2:pass}
endsnippet

snippet dj:modelImport "Django Model Import"
from django.db import models
from django.utils.translation import gettext_lazy as _

$0
endsnippet

snippet dj:modelSave "Django Model Function Save"
def save(self, *args, **kwargs):
	${1:pass}
	super(${2:Model}, self).save(*args, **kwargs)
endsnippet

#Test

snippet djt:viewListClass3 "Django Views List"
class ${1:Name}List(generics.ListCreateAPIView):
	queryset = ${1//$0/}.objects.all()
	serializer_class = ${1//$0/}Serializer
	name = '${1/\w+\s*/\L$0\E/}-list'

	#filter_class = ${1//$0/}Filter
	filterset_fields = ['${2:Field}', ]
	search_fields = ['${2//$0/}', ]
	ordering_fields = ['${2//$0/}', ]

$0
endsnippet