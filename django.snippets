# Xo

#Fields Snippers

snippet field:Boolean "Django Fields Boolean"
${1:field_name} = models.BooleanField(default=${2:True})
endsnippet

snippet field:Char "Django Fields Char"
${1:field_name} = models.CharField(max_length=${2:value})
endsnippet

snippet field:Choice "Django Fields Choice Simple"
${1:CHOICE_NAME} = (
	('${2:key}', '${3:value}'),
)
${4:field_name} = models.CharField(
	max_length=${5:value}, choices=${1//$0/}, default='${2//$0/}'
)
$0
endsnippet

snippet field:ChoiceClass "Django Fields Choice Class"
# pip install enum34
from enum import Enum

class ${1:Choice}Enum(Enum):
	name = (
		'fn', 'Full Name',
	)
	#...
	@classmethod
	def get_value(cls, member):
		return cls[member].value[0]

${2:field_name} = models.CharField(
	max_length=${2:value},
	choices=[x.value for x in ${1//$0/}Enum]
)
endsnippet

snippet dj:optionChoice "Django Fields Choice Options"
'${1:key}', '${2:value}',
endsnippet

snippet field:DateTime "Django Fields DateTime"
${1:field_name} = models.DateTimeField()
endsnippet

snippet field:Decimal "Django Fields Decimal"
${1:field_name} = models.DecimalField(
	max_digits=${2:value}, decimal_places=${3:value}
)
endsnippet

snippet field:Float "Django Fields Float"
${1:field_name} = models.FloatField(default=${2:value})
endsnippet

snippet field:ForeignKey "Django Fields ForeingKey"
${1:field_name} = models.ForeignKey(
	${2:Table}, on_delete=models.CASCADE,
	related_name='${3:field_related}'
)
endsnippet

snippet field:Image "Django Fields Image"
${1:field_name} = models.ImageField(upload_to='${2:path}/')
endsnippet

snippet field:Manager "Django Fields Manager"
${1:field_name} = ${1:models.}Manager()
endsnippet

snippet field:ManyToMany "Django Fields ManyToMany"
${1:field_name} = models.ManyToManyField(
	${2:Table},
	related_name='${3:field_related}'
)
endsnippet

snippet field:OneToOne "Django Fields OneToOne"
${1:field_name} = models.OneToOneField(
	${2:Table}, on_delete=models.CASCADE
)
endsnippet

snippet field:PositiveInteger "Django Fields PositiveInteger"
${1:field_name} = models.PositiveIntegerField()
endsnippet

snippet field:Slug "Django Fields Slug"
${1:field_name} = models.SlugField(
	max_length=${2:value},
	unique_for_date='${3:Field}'
)
endsnippet

snippet field:Text "Django Fields Text"
${1:field_name} = models.TextField()
endsnippet

snippet field:Uuid "Django Fields UUID"
from uuid import uuid4
${1:field_name} = models.UUIDField(
	primary_key=True, default=uuid4, editable=False
)
endsnippet

#Model Snippers

snippet model:Model "Django Model"
class ${1:Model}(models.Model):
	# fields
	${2:name} = models.CharField(max_length=255)

	class Meta:
		# ordering = ['${2//$0/}',]
		verbose_name = '${1//$0/}'
		verbose_name_plural = '${1//$0/}s'

	def __str__(self):
		return f'{self.${2//$0/}}'

endsnippet

snippet model:Function "Django Model Function"
def ${1:name_function}(self):
	${2:pass}
endsnippet

snippet model:Import "Django Model Import"
from django.db import models
from django.utils.translation import gettext_lazy as _

$0
endsnippet

snippet model:Save "Django Model Function Save"
def save(self, *args, **kwargs):
	${1:pass}
	super(${2:Model}, self).save(*args, **kwargs)
endsnippet


# Urls

snippet url:path "Django Urls Path"
path('${1:url}', ${2:view}, name='${3:name}'),
endsnippet

snippet url:path.include "Django Urls Include"
path('${1:url}/', include('${2:app}.urls')),
endsnippet

# Admin

snippet admin:register "Django Admin Register"
admin.site.register(${1:Model})
endsnippet

snippet admin:inline "Django Admin Inline"
class ${1:Model}Inline(admin.${2:StackedInline or TabularInline}):
	model = ${1///}
	extra = ${3:0}
endsnippet

snippet admin:model "Django Admin Model"
class ${1:Model}Admin(admin.ModelAdmin):
	${2:pass}

admin.site.register(${1///}, ${1///}Admin)
endsnippet
