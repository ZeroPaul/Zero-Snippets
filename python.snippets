#" Python3 {{{
snippet she "Shebang header for python scripts py3" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

$0
endsnippet

snippet pri "print py3" b
print($0)
endsnippet

snippet inp "input py3"
input(${1:Instrucction})
endsnippet

snippet forb "for with range py3"
for ${1:Iteration} in range(${2:Value}):
    ${0:pass}
endsnippet

snippet len "len py3"
len(${1:Name})
endsnippet

snippet openb "open py3"
open(${1:ValueOne}, ${2:ValueTwo})
endsnippet

#Variables assignment {{{

snippet var "Only varible py3"
${1: Name_Varible} = ${2:Value}
endsnippet

snippet varm+ "Multiple variable py3"
i$0
endsnippet
                          
snippet vai "Increment += py3"
${1: Name_Varible} += ${2:Value}    
endsnippet

snippet vad "Decrement -= py3"
${1: Name_Varible} -= ${2:Value}    
endsnippet

#}}}

#Type conversions {{{

snippet int "Integer / conversions py3"
int(${1:Variable})
endsnippet

snippet intb "Integer base in parameter / conversions py3"
int(${1:Variable}, ${2:BaseIN})

endsnippet
snippet flo "Float py3"
int(${1:Variable})
endsnippet

snippet rou "Round / conversions py3"
round(${1:Variable}, ${2:NumberDecimal})
endsnippet

snippet boo "Bool / conversions py3"
bool(${1:Variable})
endsnippet

snippet str "String / conversions py3"
str(${1:Variable})
endsnippet

snippet lis "List / conversions py3"
list(${1:Variable})
# list("abc") -> ['a','b','c']
endsnippet

snippet dic "Dicctionary / conversions py3"
dict(${1:Variable})
# dict([(3, "three"), (1, "one")]) -> {1: 'one', 3: 'three'}
endsnippet

snippet set "Set / conversions py3"
set(${1:Variable})
# set(["one", "two"]) -> {'one', 'two'}
endsnippet

#}}}

#}}}

# Django {{{

# Models {{{

snippet dclass "Django Models (class)" b
class ${1:model}(models.Model):
    ${2:name} = models.CharField(max_length=${3:Value})
    $0
    
    def __str__(self):
        return self.${2//$0/}

    def get_absolute_url(self):
        return reverse('name_url', kwargs={'pk': self.pk})
    
    class Meta:
        #abstract = True
        ordering = ('${2//$0/}',)
        verbose_name_plural = '${1//$0/}'
endsnippet

# }}}

# Fields {{{
snippet mslug "Django Model Field Slug"
${1:Name} = models.SlugField(max_length=${2:Value}, unique_for_date='${3:Field}')
endsnippet

snippet mforeingKey "Django Model Field ForeingKey"
${1:Name} = models.ForeignKey(User, on_delete=models.CASCADE, \
							  related_name='${2:ReName}')
endsnippet

snippet mchar "Django Model Field Char"
${1:Name} = models.CharField(max_length=${2:Value})
endsnippet

snippet mtext "Django Model Field Text"
${1:Name} = models.TextField()
endsnippet

snippet mdateTime "Django Model Field DateTime"
${1:Name} = models.DateTimeField( \
								${2}#default=timezone.now \
								#auto_now_add=True \
								#auto_now=True \
								)
endsnippet

snippet mchoice "Django Model Field Simple Choice" b
${1:ChoiceName} = (
    ('${2:Key}', '${3:Value}'),
)
${4:Name} = models.CharField(max_length=${5:Value}, choices=${1//$0/},\
							default='${2//$0/}')
$0
endsnippet

snippet mchoicesuper "Django Super Choice" b
#pip install enum34
#from enum import Enum
class ${1:CHOICENAME}(Enum):
    name = ('fn', 'Full Name')
    #...
    @classmethod
    def get_value(cls, member):
        return cls[member].value[0]
choice = models.CharField(max_length=2, choices=[x.value for x in ${1//$0/}])
$0
endsnippet

# }}}

# View {{{

snippet dcbviewsimple "Django View CBV Simple" b
#from django.http import HttpResponse
#from django.views.generic import View

class ${1: Name}View(View):
    def get(self, request, *args, **kwargs):
        # Business logic goes here
        return HttpResponse('CBV')

endsnippet

snippet dcbviewsuper "Django View CBV Super" b
from django.urls import reverse
from django.views.generic import CreateView, ListView, DetailView, UpdateView

from .models import ${1:ModelName}
#from .forms import ${1//$0/}CreateForm, ${1//$0/}UpdateForm

class ${1//$0/}CreateView( CreateView):
    model = ${1//$0/}
    fields = ['name_field', '']
    #form_class = ${1//$0/}CreateForm #Only Forms

class ${1//$0/}ListView(ListView):
    model = ${1//$0/}

    def get_queryset(self):
        # Fetch the queryset from the parent get_queryset
        queryset = super(${1//$0/}ListView, self).get_queryset()
        # Get the q GET parameter
        q = self.request.GET.get("q")
        
        if q:
            # Return a filtered queryset
            return queryset.filter(name_field__icontains=q)
        # Return the base queryset
        return queryset

class ${1//$0/}DetailView(DetailView):
    model = ${1//$0/}

class ${1//$0/}ResultsView(${1//$0/}DetailView):
    template_name = 'Name App/results.html'

class ${1//$0/}UpdateView(UpdateView):
    model = ${1//$0/}
    fields = ['name_field', '']
    #form_class = ${1//$0/}UpdateForm #Only Forms

    def get_success_url(self):
        return reverse('Name App:detail', kwargs={'pk': self.object.pk})

endsnippet

# }}}

# Urls {{{

snippet dcbvurl "Django URL CBV"
from django.conf.urls import url

from . import views #Best Practice
#from .views import ${1//$0/}ListView, ${1//$0/}DetailView,
#                   ${1//$0/}ResultsView, ${1//$0/}UpdateView

urlpatterns = [
    url(
        regex=r'^$',
        view=views.${1:ModelName}ListView.as_view(),
        name='list'
    ),
    url(
        regex=r'^(?P<pk>\d+)/$',
        view=views.${1//$0/}DetailView.as_view(),
        name='detail'
    ),
    url(
        regex=r'^(?P<pk>\d+)/results/$',
        view=views.${1//$0/}ResultsView.as_view(),
        name='results'
    ),
    url(
        regex=r'^(?P<pk>\d+)/update/$',
        view=views.${1//$0/}UpdateView.as_view(),
        name='update'
    )
]

endsnippet

snippet dsurl "Django URL settings root" b
urlpatterns += [
    url(r'^${1: NameApp}/', include('${1//$0/}.urls', namespace='${1//$0/}')),
]

endsnippet

# }}}

# Validators {{{

snippet dvalidators "Django Validators" b
# core/validators.py
from django.core.exceptions import ValidationError

def validate_${1:name}(value):
    """Raise a ValidationError if the value doesn't start with the
        word '${1//$0/}'.
    """
    if not value.startswith('${1//$0/}'):
        msg = 'Must start with ${1//$0/}'
        raise ValidationError(msg)
   #Usage
   #from .validators import validate_${1//$0/}
   #title = models.CharField(max_length=255, validators=[validate_${1//$0/}])

endsnippet

# }}}

# Admin {{{

snippet dadminRegister "Django Admin Register"
	
admin.site.register(${1:NameModel})

endsnippet

snippet adminClass "Django Admin Class"
@admin.register(${1:NameApp})
class ${1//$0/}Admin(admin.ModelAdmin):
	list_display= (${2:Fields})
	list_filter	=	('status',	'created',	'publish',	'author')
	search_fields	=	('title',	'body')
	prepopulated_fields	=  {${:Name}} #{'slug':	('title',)}
	raw_id_fields	= ('${:Name}',)
	date_hierarchy	= '${:Name}'#'publish'
endsnippet
# }}}

#}}}

# Django Rest {{{

snippet rmodels "DjangoRest Model" b
import uuid as uuid_lib
from django.utils.encoding import python_2_unicode_compatible

from django.db import models
from django.urls import reverse

@python_2_unicode_compatible # For Python 3.5+ and 2.7
class ${1:ModelName}(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True)
    # Used to find the web URL
    uuid = models.UUIDField(db_index=True, default=uuid_lib.uuid4, editable=False)

    class Meta:
        #abstract = True
        ordering = ["${2:title}"]
        verbose_name = "${1//$0/}"
        verbose_name_plural = "${1//$0/}s"
    
    def __str__(self):
        return str(self.title)

    def get_absolute_url(self):
        return reverse('name_url', kwargs={'slug': self.slug})

endsnippet

snippet rserializers "DjangoRest Serializers" b
from rest_framework import serializers

from ..models import ${1:ModelName}

class ${1//$0/}Serializer(serializers.ModelSerializer):
    class Meta:
        model = ${1//$0/}
        fields = ['uuid', 'slug',]

endsnippet

snippet rviews "DjangoRest Views" b
from rest_framework.generics import (
    ListCreateAPIView,
    RetrieveUpdateDestroyAPIView
)
from rest_framework.permissions import IsAuthenticated

from ..models import ${1:ModelName}
from .serializers import ${1//$0/}Serializer

class ${1//$0/}ListCreateAPIView(ListCreateAPIView):
    queryset = ${1//$0/}.objects.all()
    permission_classes = (IsAuthenticated, )
    serializer_class = ${1//$0/}Serializer
    lookup_field = 'uuid' # Don't use ${1//$0/}.id!

class ${1//$0/}RetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView):
    queryset = ${1//$0/}.objects.all()
    permission_classes = (IsAuthenticated, )
    serializer_class = ${1//$0/}Serializer
    lookup_field = 'uuid' # Don't use ${1//$0/}.id!

endsnippet

snippet rurls "DjangoRest urls" b
from django.conf.urls import url

from ${1/\w+\s*/\l$0/g}s.api import views

# Model -> ${1:ModelName}

urlpatterns = [
    # / ${1/\w+\s*/\l$0/g}s/api/
    url(
        regex=r'^api/$',
        view=views.${1/\w+\s*/\u$0/g}ListCreateAPIView.as_view(),
        name='${1/\w+\s*/\l$0/g}_rest_api'
    ),
    # /${1/\w+\s*/\l$0/g}s/api/:slug/
    url(
        regex=r'^api/(?P<uuid>[-\w]+)/$',
        view=views.${1/\w+\s*/\u$0/g}RetrieveUpdateDestroyAPIView.as_view(),
        name='${1/\w+\s*/\l$0/g}_rest_api'
    )
]

endsnippet

# snippet radmin "DjangoRest Admin"
# from django.contrib import admin
# from django.urls import reverse, NoReverseMatch
# from django.utils.html import format_html

# from .models import IceCreamBar

# @admin.register(IceCreamBar)
# class IceCreamBarModelAdmin(admin.ModelAdmin):
#     list_display = ('name', 'shell', 'filling')
#     readonly_fields = ('show_url',)
#     def show_url(self, instance):
#         url = reverse('ice_cream_bar_detail', kwargs={'pk': instance.pk})
#         response = format_html("""<a href="{0}">{0}</a>""", url)
#         return response
#     show_url.short_description = 'Ice Cream Bar URL'
#     # Displays HTML tags
#     # Never set allow_tags to True against user submitted data!!!
#     show_url.allow_tags = True
# endsnippet

# }}}
